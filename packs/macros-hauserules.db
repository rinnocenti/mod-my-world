{"name":"ChatMessager","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"ChatMessage.create({\r\n        speaker: ChatMessage.getSpeaker(),\r\n        content: `${args[0]}`,\r\n        type: CONST.CHAT_MESSAGE_TYPES.IC,\r\n    }, { chatBubble: true });","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"2sC03WScy9peAXIm"}
{"name":"Dialog","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//Dialog Arguments Required => args[0] === Dialog Contents\r\n///////////////////////////////args[1] === unique ID\r\n///////////////////////////////args[2] === single/each\r\n/*\r\nargs[0] = \"veja só aqui hein\";\r\nargs[1] = \"dialog\";\r\nargs[2] = \"single\";\r\n*/\r\nif(args[2] === \"single\")\r\n{\r\n    let invalid = false;\r\n    for(let user of game.users)\r\n    {\r\n        if(invalid) return;\r\n        invalid = user.getFlag(`world`,`${args[0]}`) ? user.getFlag(`world`,`${args[0]}`) : false;\r\n    }\r\n    game.user.setFlag(`world`,`${args[0]}`,true);\r\n}else{\r\n    if(args[1] !== undefined || args[1] !== \"\")\r\n    {\r\n        let invalid = game.user.getFlag(`world`,`${args[1]}`) ? game.user.getFlag(`world`,`${args[1]}`) : false;\r\n        if (invalid) return;\r\n        game.user.setFlag(`world`,`${args[1]}`,true);\r\n    }\r\n}\r\n let content = args[0];\r\n\r\nnew Dialog({\r\n   content : content,\r\n   buttons : \r\n   { \r\n      ok : { label : \"OK\" } \r\n   } \r\n}).render(true);","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"5Lt7KLI5RFu4205J"}
{"name":"SeeID","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Display Name & IDs\r\nfor(let token of canvas.tokens.controlled)\r\n{\r\n    ChatMessage.create({\r\n        content : token.name + \" \" + token.id\r\n    });\r\n}\r\n\r\nfor(let wall of canvas.walls.controlled)\r\n{\r\n    ChatMessage.create({\r\n        content : wall.name + \" \" + wall.id\r\n    })\r\n}\r\n/*\r\nfor(let light of canvas.lighting.activate)\r\n{\r\n    ChatMessage.create({\r\n        content : light.name + \" \" + light.id\r\n    })\r\n}\r\nfor (let note of canvas.notes.placeables)\r\n{\r\n    ChatMessage.create({\r\n        content :  note.name + \" \" + note.id\r\n     });\r\n}\r\n*/\r\nfor (let draw of canvas.drawings.controlled)\r\n{\r\n   ChatMessage.create({\r\n      content :  draw.name + \" \" + draw.id\r\n   });\r\n}\r\n\r\nfor (let tile of canvas.tiles.controlled)\r\n{\r\n    ChatMessage.create({\r\n        content :  tile.name + \" \" + tile.id\r\n     });\r\n}","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"5g5M5rzPz0K6E42w"}
{"name":"OpenDoor","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/*\r\nargs[0] = `30.25`//CD Strang.Dex\r\nargs[1] = \"Unlock\"; //Sucess Action\r\nargs[2] = \"ChatMessager\"; //Fail Actions\r\nargs[3] = '1JShaVOYAW8kXN0L,t';//Parametros Sucess\r\nargs[4] = `Não consigo abrir esta porta`;// Parametros Fail\r\n//args[5] = \"\";//Key Door\r\n//args[6] = \"\";//Unique ID\r\n/*\r\n//const speaker = ChatMessage.getSpeaker();\r\n//const actor = game.actors.get(speaker.actor);\r\n//const token= game.tokens.get(speaker.token);\r\n*/\r\n\r\nif (game.user.isGM === true) return;\r\nif (args[6] !== undefined || args[6] === \"\") {\r\n    if (Innocenti.TriggerShot(args[6])) return;\r\n}\r\nlet cd = args[0].split(\".\");\r\nlet cdStr = (cd[0] !== undefined && cd[0] !== \"\") ? parseInt(cd[0]) : 0;\r\nlet cdDex = (cd[1] !== undefined && cd[1] !== \"\") ? parseInt(cd[1]) : 0;\r\nlet d = new Dialog({\r\n    title: \"Tentativa de Abrir Porta\",\r\n    content: \"<p>A Porta está Trancada como você deseja abrir a porta?</p>\",\r\n    buttons: {\r\n        one: {\r\n            icon: '<i class=\"fas fa-fist-raised\"></i>',\r\n            label: \"Força\",\r\n            callback: async () => {\r\n                await game.user.character.rollSkill(`ath`).then((result) => {\r\n                    if (result.total >= cdStr) {\r\n                        Innocenti.Check(args[1], args[3]);\r\n                    } else {\r\n                        Innocenti.Check(args[2], args[4]);\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        two: {\r\n            icon: '<i class=\"fas fa-user-lock\"></i>',\r\n            label: \"Ferramenta de ladrão\",\r\n            callback: async () => {\r\n                let item = actor.items.find(i => i.name === `Thieves’ Tools` || i.name === `Ferramenta de Ladino`);\r\n                if (!item) return `/Whisper GM \"O Item Thieves’ Tools não foi encontrado\"`;\r\n                await MinorQOL.doCombinedRoll({ actor, item, event, token }).then((result) => {\r\n                    if (result.total >= cdDex) {\r\n                        Innocenti.Check(args[1], args[3]);\r\n                    } else {\r\n                        Innocenti.Check(args[2], args[4]);\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        tree: {\r\n            icon: '<i class=\"fas fa-key\"></i>',\r\n            label: \"Chave\",\r\n            callback: () => {\r\n                if (args[5] !== undefined && args[5] !== \"\") {\r\n                    let item = actor.items.find(i => i.name === `${args[5]}`);\r\n                    if (doorKey !== null && item) {\r\n                        Innocenti.Check(args[1], args[3]);\r\n                    } else {\r\n                        Innocenti.Check(args[2], args[4]);\r\n                    }\r\n                }else{return `Não Tenho a Chave`;}\r\n            }\r\n        }\r\n    },\r\n    default: \"one\",\r\n    close: () => console.log(\"This always is logged no matter which option is chosen\")\r\n});\r\nd.render(true);","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"7wkGC4LGC6clRZ1Z"}
{"name":"PlaySound","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"/*\r\nargs[0] = `AmbientTracks/waterfall.ogg`  //Src of music\r\nargs[1] = 0.5;//Volume\r\nargs[2] = 2;//maxtime\r\n//args[3] = Name.Type.reset\r\n*/\r\n\r\nif (args[3] !== undefined || args[3] === \"\") {\r\n    if (Innocenti.TriggerShot(args[3])) return;\r\n}\r\n\r\nlet src = `playlist-import/${args[0]}`;\r\nlet sound = AudioHelper.play({ src: src, volume: args[1], autoplay: true, loop: false }, true);\r\nif (args[2] !== undefined && args[2] !== \"\" && args[2] > 0) {\r\n    setTimeout(function () {\r\n        sound.stop();\r\n    }, args[2] * 1000);\r\n}\r\n","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"9B3QrRBAnKdh6Vdv"}
{"name":"HitTarget","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"// Requires minor-qol to work completely\r\n// Rolls an attack from actor args[0] using item args[1] and display a token args[2]\r\nlet tactor = game.actors.entities.find(a => a.name === args[0])\r\nif (!tactor) return `/Whisper GM \"DoTrap: Target token ${args[0]} not found\"`\r\nlet item = tactor.items.find(i => i.name === args[1])\r\nif (!item) return `/Whisper GM \"DoTrap: Item ${args[1]} not found\"`\r\nlet oldTargets = game.user.targets;\r\ngame.user.targets = new Set();\r\ngame.user.targets.add(token);\r\nHooks.once(\"MinorQolRollComplete\", () => {\r\n    ChatMessage.create({\r\n        user: ChatMessage.getWhisperRecipients(\"GM\")[0],\r\n        content: \"restoring targets\",\r\n        whisper: ChatMessage.getWhisperRecipients(\"GM\"),\r\n        blind: true\r\n    });\r\n    MinorQOL.forceRollDamage = false;\r\n    game.user.targets = oldTargets;\r\n})\r\nMinorQOL.forceRollDamage = true;\r\nawait MinorQOL.doCombinedRoll({ actor, item, event, token })\r\nlet trapToken = canvas.tokens.placeables.find(t => t.name === args[2])\r\nif (trapToken) await DynamicEffects.setTokenVisibility(trapToken.id, true);\r\n\r\n// sample trigger happy line\r\n// @Token[Trap1] @Trigger[capture move] @ChatMessage[/DoTrapAttack TrapEffects \"Scything Blade\" Trap1]\r\n// requires a token on the map called Trap1\r\n// An actor called TrapEffects (does not need to be on the map)\r\n// The actor TrapEffects needs a weapon called \"Scything Blade\"\r\n// If using minor-qol the damage will be auto applied","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"BL3eGFDYju4OqUKM"}
{"name":"Descanço Longo (Tempo)","permission":{"default":0,"XH24HWwqaZhSywRV":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"game.Gametime.advanceTime({hours: -8}) ","author":"XH24HWwqaZhSywRV","img":"icons/svg/clockwork.svg","actorIds":[],"_id":"CYxiVYFI3dRnBjoF"}
{"name":"Unlock","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//Unlock Door Macro\r\n//Required arguments => args[0] === doorID\r\n////////////////////////args[1] === t/f open or close\r\n//args[0] = \"u7RP8YbhJzcFb5V8\";\r\n//args[1] = \"s\";\r\nif(args[1] === `t`)\r\n{\r\n    canvas.walls.get(args[0]).update({\r\n        ds : 1\r\n    });\r\n}else if(args[1] === `s`)\r\n{\r\n    canvas.walls.get(args[0]).update({\r\n        door: 1,\r\n        ds : 1\r\n    });\r\n}else{\r\n    canvas.walls.get(args[0]).update({\r\n        ds : 0\r\n    });\r\n}","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"GwH22pQlw4x6g2Eu"}
{"name":"Hidden","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = \"y3y3UDXehed4iw6D\";\r\nfor(let arg of args)\r\n{\r\n    try{\r\n        canvas.tokens.get(arg).update({\"hidden\" : true});\r\n    }catch(error){}\r\n    try{\r\n        canvas.drawings.get(arg).update({\"hidden\" : true});\r\n    }catch(error){}\r\ntry{\r\n        canvas.tiles.get(arg).update({\"hidden\" : true});\r\n    }catch(error){}\r\n}","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"IxAYQdXrBpMSYWrs"}
{"name":"Checks","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/*\r\nargs[0] = \"acr\";\r\nargs[1] = 15;\r\nargs[2] = \"Reveal\";\r\nargs[3] = \"Vixi\";\r\nargs[4] = \"y3y3UDXehed4iw6D\";\r\nargs[5] = \"y3y3UDXehed4iw6D\";\r\n////args[6] = \"WireTrap . perPlayer . 3\";\r\n*/\r\nif (game.user.isGM === true) return;\r\nif (args[6] !== undefined || args[6] === \"\") {\r\n    if (Innocenti.TriggerShot(args[6])) return;\r\n}\r\n//console.log(args);\r\nif (Object.entries(game.dnd5e.config.skills).map(a => a[0]).includes(args[0])) {\r\n    game.user.character.rollSkill(args[0]).then((result) => {\r\n        if (result.total >= args[1]) {\r\n            Innocenti.Check(args[2], args[4]);\r\n        } else {\r\n            Innocenti.Check(args[3], args[5], args[6]);\r\n        }\r\n    });\r\n} else if (Object.entries(game.dnd5e.config.abilities).map(a => a[0]).includes(args[0])) {\r\n    game.user.character.rollAbilityTest(args[0]).then((result) => {\r\n        if (result.total >= args[1]) {\r\n            Innocenti.Check(args[2], args[4]);\r\n        } else {\r\n            Innocenti.Check(args[3], args[5], args[6]);\r\n        }\r\n    })\r\n}","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"J07XobvQM5XufiFf"}
{"name":"PauseGame","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//Pause Game Macro arguments => args[0] === uniqueID\r\n\r\nif(args[0] !== undefined || args[0] === \"\")\r\n{\r\n    let invalid = false;\r\n    for(let user of game.users)\r\n    {\r\n        if(invalid) return;\r\n        invalid = user.getFlag(`world`,`${args[0]}`) ? user.getFlag(`world`,`${args[0]}`) : false;\r\n    }\r\n    game.user.setFlag(`world`,`${args[0]}`,true);\r\n}\r\n\r\ngame.togglePause(true,true);","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"JD8jPgyFdVTp6sj4"}
{"name":"PassiveCheck","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/*\r\nargs[0] = \"acr\"; // Skill Check\r\nargs[1] = 10; // DC\r\nargs[2] = \"None\"; // Sucess Conditional\r\nargs[3] = \"None\"; // Fail Conditional\r\nargs[4] = \"None\"; // Effects Sucess\r\nargs[5] = \"None\"; // Effects Fail\r\n//args[6] = \"WireTrap . perPlayer . 3\";\r\n*/\r\nif (args[6] !== undefined || args[6] === \"\") {\r\n    if (game.user.isGM === true) return;\r\n    if(Innocenti.TriggerShot(args[6]))return;  \r\n}\r\n\r\nif (Object.entries(game.dnd5e.config.skills).map(a => a[0]).includes(args[0])) {\r\n    let actor = game.user.character;\r\n    let skill = actor.data.data.skills[args[0]].passive;\r\n    let nskill = Object.entries(game.dnd5e.config.skills).find(i=>i[0] === args[0]);\r\n    if (skill >= parseInt(args[1])) {\r\n        Innocenti.Check(args[2], args[4]); //sucess\r\n        ChatMessage.create({\r\n            user: ChatMessage.getWhisperRecipients(\"GM\")[0],\r\n            content: `${actor.name} passou em um teste de ${nskill[1]} passiva.`,\r\n            speaker: speaker,\r\n            whisper: ChatMessage.getWhisperRecipients(\"GM\"),\r\n            blind: true\r\n        });\r\n        ChatMessage.create({\r\n            speaker: ChatMessage.getSpeaker(),\r\n            flavor: `${nskill[1]} passiva`,\r\n            content: \"Parece que eu vi algo\",\r\n            type: CONST.CHAT_MESSAGE_TYPES.IC,\r\n        }, { chatBubble: true });\r\n    } else {\r\n        Innocenti.Check(args[3], args[5]);//fail\r\n        ChatMessage.create({\r\n            user: ChatMessage.getWhisperRecipients(\"GM\")[0],\r\n            content: `${actor.name} falhou em um teste de ${nskill[1]} passiva.`,\r\n            speaker: speaker,\r\n            whisper: ChatMessage.getWhisperRecipients(\"GM\"),\r\n            blind: true\r\n        });\r\n    }\r\n}","author":"bE4FsemgBF2CPXB2","img":"icons/svg/d20-highlight.svg","actorIds":[],"_id":"JfHWf8tYSiBajjwG"}
{"name":"Roll Saves","permission":{"default":0,"XH24HWwqaZhSywRV":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// Esse macro abre uma caixa de diálogo para que o usuário selecione\r\n// uma atributo, escolha se deseja rolar salvaguarda ou teste normal\r\n// e então a role diretamente, sem necessidade de abrir a ficha.\r\n\r\n// Feito por: Melithian539\r\n\r\nasync function selection() {\r\n   const _selectSkill = function(form, actor) {\r\n      let ability = form.find('[name=\"atributo\"]').val();\r\n      let type = $(\"input[name='testtype']:checked\").val();\r\n      if (type === 'saves') {\r\n         actor.rollAbilitySave(ability);\r\n      } else if (type === 'ability') {\r\n         actor.rollAbilityTest(ability);\r\n      }\r\n   };\r\n\r\n   if (canvas.tokens.controlled.length == 1) {\r\n      var actor = canvas.tokens.controlled[0].actor;\r\n   } else if (canvas.tokens.controlled.length < 1) {\r\n      if (!game.user.isGM) {\r\n         var actor = game.user.character;\r\n      } else {\r\n         ui.notifications.warn(\"Selecione ao menos UM token.\")\r\n         return;\r\n      }\r\n   } else {\r\n      ui.notifications.warn(\"Selecione somente UM token.\")\r\n      return;\r\n   }\r\n\r\n   let template = \"modules/melithian-macros/templates/ability-check-selector.html\"\r\n   let dialogData = {\r\n      atributo: CONFIG.DND5E.abilities[\"str\"],\r\n      atributos: CONFIG.DND5E.abilities,\r\n      personagem: actor.name\r\n   };\r\n\r\n   const html = await renderTemplate(template, dialogData);\r\n\r\n   let d = new Dialog({\r\n      title: \"Testes de Atributo\",\r\n      content: html,\r\n      buttons: {\r\n         one: {\r\n            icon: '<i class=\"fas fa-dice-d20\"></i>',\r\n            label: \"Rolar\",\r\n            callback: html => _selectSkill(html, actor)\r\n         },\r\n         two: {\r\n            icon: '<i class=\"fas fa-times\"></i>',\r\n            label: \"Cancelar\",\r\n            callback: html => console.log()\r\n         }\r\n      },\r\n      close: html => console.log()\r\n   });\r\n\r\n   d.render(true);\r\n}\r\n   \r\nselection();","author":"XH24HWwqaZhSywRV","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"UQEVCGAehqxJFhka"}
{"name":"Roll Skills","permission":{"default":0,"XH24HWwqaZhSywRV":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"async function selection() {\r\n   const _selectSkill = function(form, actor) {\r\n      let skill = form.find('[name=\"pericia\"]').val();\r\n      actor.rollSkill(skill);\r\n   };\r\n\r\n   if (canvas.tokens.controlled.length == 1) {\r\n      var actor = canvas.tokens.controlled[0].actor;\r\n   } else if (canvas.tokens.controlled.length < 1) {\r\n      if (!game.user.isGM) {\r\n         var actor = game.user.character;\r\n      } else {\r\n         ui.notifications.warn(\"Selecione ao menos UM token.\")\r\n         return;\r\n      }\r\n   } else {\r\n      ui.notifications.warn(\"Selecione somente UM token.\")\r\n      return;\r\n   }\r\n\r\n   let template = \"modules/melithian-macros/templates/skill-check-selector.html\"\r\n   let dialogData = {\r\n      pericia: CONFIG.DND5E.skills[\"acr\"],\r\n      pericias: CONFIG.DND5E.skills,\r\n      personagem: actor.name\r\n   };\r\n\r\n   const html = await renderTemplate(template, dialogData);\r\n\r\n   let d = new Dialog({\r\n      title: \"Testes de Perícia\",\r\n      content: html,\r\n      buttons: {\r\n         one: {\r\n            icon: '<i class=\"fas fa-dice-d20\"></i>',\r\n            label: \"Rolar Perícia\",\r\n            callback: html => _selectSkill(html, actor)\r\n         },\r\n         two: {\r\n            icon: '<i class=\"fas fa-times\"></i>',\r\n            label: \"Cancelar\",\r\n            callback: html => console.log()\r\n         }\r\n      },\r\n      close: html => console.log()\r\n   });\r\n\r\n   d.render(true);\r\n}\r\n   \r\nselection();","author":"XH24HWwqaZhSywRV","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"V0OtwEoNfg9eQ7Kg"}
{"name":"Visitar","permission":{"default":0,"8bpTL3zM1IYuYBzc":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"if (canvas.tokens.controlled.length === 0)\r\n        return ui.notifications.error(\"select a token\");\r\n//let target = canvas.tokens.targetObjects;\r\n//for (let target of canvas.tokens.selectObjects)\r\nconst target = game.user.targets.values().next().value;\r\nif (!target) {\r\n    ui.notifications.warn(\"No token is targeted\");\r\n    return;\r\n  }\r\nfor (let targetToken of game.user.targets) {\r\n    let img = targetToken.actor.img || targetToken.data.img;\r\n    let imgtk = targetToken.data.img || targetToken.actor.img;\r\n    let chat = ChatMessage.create({\r\n        content: `<h3><img src=\\\"${img}\\\" width=\\\"50px\\\" /> Wellcome to @Actor[${targetToken.actor.data._id}]{${targetToken.name}}</h3>`,\r\n        user: game.user._id,\r\n        speaker: ChatMessage.getSpeaker(),\r\n        flavor: `<img src=\\\"${imgtk}\\\" width=\\\"30px\\\" />`,\r\n    });\r\n}\r\n\r\n","author":"8bpTL3zM1IYuYBzc","img":"icons/svg/hanging-sign.svg","actorIds":[],"_id":"ZsddAL6zQU2JTNdt"}
{"name":"Bubble","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"/*\r\nargs[0] = \"Harbin Wester\";// Token name \"Self\" é o token do jogador\r\nargs[1] = `<h3>Bem Vindos</h3>`;// Texto\r\nargs[2] = 2;// time in sec\r\nargs[3] = \"celestial\";// language\r\nargs[4] = 5;// time to reset\r\nargs[5] = \"unique-key-ret\";// unique key\r\n*/\r\n//ui.notifications.info(args[0]);\r\nargs[2] = parseInt(args[2]);\r\nargs[4] = parseInt(args[4]);\r\nif (args[5] !== undefined || args[5] === \"\") {\r\n    let invalid = game.user.getFlag(`world`, `${args[5]}`) ? game.user.getFlag(`world`, `${args[5]}`) : false;\r\n    if (invalid) return;\r\n    game.user.setFlag(`world`, `${args[5]}`, true);\r\n}\r\nsetTimeout(function () {\r\n    let t = canvas.tokens.placeables.find(i => i.name === args[0]);\r\n    canvas.tokens.selectObjects({});\r\n    $(`#polyglot select`).val(`${args[3]}`);\r\n    ChatMessage.create({\r\n        speaker: { token: t, actor: t.actor, scene: canvas.scene },\r\n        content: `${args[1]}`,\r\n        type: CONST.CHAT_MESSAGE_TYPES.IC,\r\n    }, { chatBubble: true });\r\n}, args[2] * 1000);\r\n//Reset bubble\r\nif (args[4] !== undefined || args[4] >= args[2]) {\r\n    let visit_r = (args[4] >= args[2]) ? args[4] : args[2] + 1;\r\n    setTimeout(function () {\r\n        game.user.unsetFlag(`world`, `${args[5]}`);\r\n        //ui.notifications.info(\"Removeu!\");\r\n    }, args[4] * 1000);\r\n}","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"b2GsUcqGAxLpRZF7"}
{"name":"Divine Smite","permission":{"default":0,"XH24HWwqaZhSywRV":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/*\r\n * The Smite macro emulates the Divine Smite feature of Paladins in DnD 5e. A spell slot level to use\r\n * can be selected, which increases the number of damage dice, and smiting a fiend or undead\r\n * will also increase the number of damage dice.\r\n * \r\n * First, select a token to perform the smite, then target an enemy to be smitten. Make your regular \r\n * attack and then if you choose to use Divine Smite, run this macro.\r\n */\r\n\r\nlet confirmed = false;\r\n\r\n// Create a dialogue box to select spell slot level to use when smiting.\r\nnew Dialog({\r\n    title: \"Divine Smite Damage\",\r\n    content: `\r\n     <p>Spell Slot level to use Divine Smite with.</p>\r\n     <form>\r\n      <div class=\"form-group\">\r\n       <label>Spell Slot Level:</label>\r\n       <select id=\"slot-level\" name=\"slot-level\">\r\n        <option value=\"1\">1</option>\r\n        <option value=\"2\">2</option>\r\n        <option value=\"3\">3</option>\r\n        <option value=\"4\">4</option>\r\n        <option value=\"5\">5</option>\r\n       </select>\r\n      </div>\r\n     </form>\r\n     `,\r\n    buttons: {\r\n        one: {\r\n            icon: '<i class=\"fas fa-check\"></i>',\r\n            label: \"SMITE!\",\r\n            callback: () => confirmed = true\r\n        },\r\n        two: {\r\n            icon: '<i class=\"fas fa-times\"></i>',\r\n            label: \"Cancel\",\r\n            callback: () => confirmed = false\r\n        }\r\n    },\r\n    default: \"Cancel\",\r\n    close: html => {\r\n        if (confirmed) {\r\n            let slotLevel = parseInt(html.find('[name=slot-level]')[0].value);\r\n            smite(slotLevel);\r\n        }\r\n    }\r\n}).render(true);\r\n\r\n/**\r\n * Gives the spell slot information for a particular actor and spell slot level.\r\n * @param {Actor5e} actor - the actor to get slot information from.\r\n * @param {integer} level - the spell slot level to get information about. level 0 is deprecated.\r\n * @returns {object} contains value (number of slots remaining), max, and override.\r\n */\r\nfunction getSpellSlots(actor, level) {\r\n    let spells = actor.data.data.spells;\r\n    switch (level) {\r\n        case 1:\r\n            return spells.spell1;\r\n        case 2:\r\n            return spells.spell2;\r\n        case 3:\r\n            return spells.spell3;\r\n        case 4:\r\n            return spells.spell4;\r\n        case 5:\r\n            return spells.spell5;\r\n    }\r\n}\r\n\r\n/**\r\n * Use the controlled token to smite the targeted token.\r\n * @param {integer} slotLevel - the spell slot level to use when smiting.\r\n */\r\nfunction smite(slotLevel) {\r\n    let targets = game.user.targets;\r\n    let suseptible = [\"fiend\", \"undead\"];\r\n    let controlledActor = canvas.tokens.controlled[0].actor;\r\n    let chosenSpellSlots = getSpellSlots(controlledActor, slotLevel);\r\n\r\n    if (chosenSpellSlots.value < 1) {\r\n        ui.notifications.error(\"No spell slots of the required level available.\");\r\n        return;\r\n    }\r\n    if (targets.size !== 1) {\r\n        ui.notifications.error(\"You must target exactly one token to Smite.\");\r\n        return;\r\n    }\r\n\r\n    targets.forEach(target => {\r\n        let numDice = slotLevel + 1;\r\n        let type = target.actor.data.data.details.type.toLocaleLowerCase();\r\n        if (suseptible.includes(type)) numDice += 1;\r\n        new Roll(`${numDice}d8`).roll().toMessage({ flavor: \"Macro Divine Smite - Damage Roll (Radiant)\", speaker })\r\n    })\r\n\r\n    chosenSpellSlots.value -= 1;\r\n}","author":"XH24HWwqaZhSywRV","img":"icons/svg/sword.svg","actorIds":[],"_id":"dhDEcJuI4zzcHG3O"}
{"name":"LongRest","permission":{"default":0,"hZjcXAiJd9XIdRhW":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"let status = Innocenti.LongRest(args[1]);\r\n\r\n//ui.notifications.info(args[1]);","author":"hZjcXAiJd9XIdRhW","img":"icons/svg/sleep.svg","actorIds":[],"_id":"eTYXenSDG5xDRY4G"}
{"name":"EncoutersScene","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"/*\r\nargs[0] = 10;\r\nargs[1] = `Encontros Aleatórios Templo do Ar`;\r\n*/\r\n//ui.notifications.info(\"Carregou mano!!\");\r\nif (!game.paused) game.togglePause(true, true);\r\nlet ea = game.Gametime.doEvery({ minutes: args[0] }, RollTabele);\r\nHooks.once(\"preUpdateScene\", () => {\r\n    //ui.notifications.info(\"A Agora Descarregou\");\r\n    game.Gametime.clearTimeout(ea);\r\n});\r\nasync function RollTabele() {\r\n    $(`.roll-type-select select`).val(`gmroll`);\r\n    const table = game.tables.getName(`${args[1]}`);\r\n    await game.betterTables.betterTableRoll(table);\r\n    await $(`.roll-type-select select`).val(`roll`);\r\n}","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"eqcAaNqrrXr1NjHf"}
{"name":"Day and Night Encountes","permission":{"default":0,"XH24HWwqaZhSywRV":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//ui.notifications.warn(game.Gametime.DTNow().hours);\r\nlet hour = game.Gametime.DTNow().hours;\r\nlet tableName = \"Encounter \"+ game.scenes.active.name;\r\ntableName += (hour >= 19 || hour < 7)?\" Night\":\" Day\";\r\n//ui.notifications.warn(\"é Noite\");\r\nconst table = game.tables.entities.find(t => t.name === tableName);\r\nif(table == null)  ui.notifications.error(\"Não existe tabela de encontro para este mapa: \" + tableName );\r\nelse\r\ngame.betterTables.betterTableRoll(table);\r\n\r\n","author":"XH24HWwqaZhSywRV","img":"icons/svg/d20-highlight.svg","actorIds":[],"_id":"frFE5ylxBlJpfHLb"}
{"name":"Permission","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//arguments required => args[0] === tokenId\r\n////////////////////////args[1] === userId\r\nif (game.user.id !== args[1]) {\r\n    let invalid = false;\r\n    for (let user of game.users) {\r\n        if (invalid) return;\r\n        invalid = user.getFlag(`world`, `${args[0]}`) ? user.getFlag(`world`, `${args[0]}`) : false;\r\n    }\r\n    game.user.setFlag(`world`, `${args[0]}`, true);\r\n    canvas.tokens.get(args[0]).actor.update({ [`permission.${args[1]}`]: 2 });\r\n}","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"htTeDsoiKXvTHBGW"}
{"name":"Sneak Attack","permission":{"default":0,"hZjcXAiJd9XIdRhW":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"//\t\tDISCLAIMER:\t\tThis macro is heavily based on the original D&D 5e Rage Macro masterwork written by Felix#6196.\r\n//\t\t\t\t\t\tNorc#5108 created and is maintaining this macro.\r\n//\r\n//\t\t\t\t\t\tUpdates:\t1.\t2020/06/05: Initial version.\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tBonus Tip: Sneak Attack as a Condition                                                                                                                       \r\n//!!!\tIf you use the Combat Utility Belt module's Condition Lab, try adding a condition called \"Sneaky\" with the same icon \t\t\t   \r\n//!!!\tas the optional sneak attack icon overlay, 'icons/svg/mystery-man-black.svg' by default.  See EXPERIMENTAL MACRO ICON/NAME TOGGLE below.\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!   OPTIONAL TOKEN ICON-\tOn by default. If a path to a sneak attack icon is defined, it displays like a condition on the sneaking rogue.\r\n//!!!\t\t\t\t\t\t\tTo use a different icon, manually change the filepath below or leave it empty ('') to disable the effect.\r\n//!!!\r\nconst sneakIconPath = 'icons/svg/mystery-man-black.svg';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tEXPERIMENTAL MACRO ICON/NAME TOGGLE\t\tIf enabled, the macro icon and name toggles based on whether the rogue is currently sneaking. \r\n//!!!\t\t\t\t\t\t\t\t\t\t\tCAUTIONS: \t1. \tThis feature is off by default and is intended for ADVANCED USERS ONLY. \r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t2. \tRequires configuration using \"The Furnace\" module for a player to run!\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe GM needs to grant The Furnace's \"Run as GM\" permission for this macro.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t3. \tWorks best with only one rogue using this feature at a time.\r\n\r\n\t\t\t\t//To auto-toggle the macro's icon/name, override toggleMacro to true below.\r\n\t\t\t\tconst toggleMacro = false;\r\n\r\n\t\t\t\t//To use a different icon, manually change the filepath here\r\n\t\t\t\tconst stopSneakIconPath = 'icons/svg/cowled.svg';\r\n\r\n\t\t\t\t//You must update the following constant to this macro's exact name for the macro icon toggling to work.\r\n\t\t\t\tconst sneakMacroName = 'Sneak Attack';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\nlet toggleResult = false;\r\nlet enabled = false;\r\nlet errorReason = '';\r\nlet sneakAttack = {};\r\nlet rogue = {};\r\nlet rogueLvls = 0;\r\nlet sneakDice = 0;\r\nlet chatMsg = '';\r\nlet oldMDmg = '';\r\nlet oldRDmg = '';\r\n\r\nlet macroActor = actor;\r\nlet macroToken = token;\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tBASIC LOCALIZATION SUPPORT\t\t\t\tSets names of D&D5E features as constants instead of hardcoding to allow easier translation.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\tSets error messages as constants also for easier translation.\r\n\r\n\t\t\t\tconst rogueClassName = 'Rogue';\r\n\t\t\t\tconst sneakAttackFeatureName = 'Sneak Attack';\r\n\r\n\t\t\t\tconst errorSelectRogue = 'Please select a single rogue token.';\r\n\t\t\t\tconst warnMacroNotFound = ' is not a valid macro name, please fix. Sneak attack toggle successful but unable to alter macro.';\r\n\t\t\t\tconst errorSelectToken = 'Please select a token.';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n\r\n//check to ensure token is selected and attempt to define the sneak attack feature\r\nif (macroActor !== null && macroActor !== undefined) {\r\n\tsneakAttack = macroActor.items.find(i => i.name == `${sneakAttackFeatureName}`);\r\n} else {\r\nerrorReason = `${errorSelectToken}`;\r\n}\r\n\r\n//check to ensure token is a rogue\r\nif (errorReason == '' && macroActor.items.find(i => i.name == `${rogueClassName}`) !== undefined) {\r\n\trogue = macroActor.items.find(i => i.name == `${rogueClassName}`);\r\n} else {\r\n\terrorReason = `${errorSelectRogue}`;\r\n}\r\n\r\nconsole.log(`Error reason is: ${errorReason}`);\r\n//main execution now that errors are caught\r\n\r\nif (errorReason == '') {\r\n\t\r\n\tchatMsg = '';\r\n\tlet enabled = false;\r\n\t// store the state of the sneak attack toggle in flags\r\n\tif (macroActor.data.flags.sneakMacro !== null && macroActor.data.flags.sneakMacro !== undefined) {\r\n\t\tenabled = true;\r\n\t}\r\n\t\r\n\t// if sneak attack is active, disable it\r\n\tif (enabled) {\r\n\t\tchatMsg = `${macroActor.name} is no longer sneak attacking.`;\r\n\t\t// ranged and melee weapon attack bonus\r\n\t\tlet obj = {};\r\n\t\tobj['flags.sneakMacro'] = null;\t\t\r\n\t\tobj['data.bonuses.mwak.damage'] = macroActor.data.flags.sneakMacro.oldMDmg;\t\t\t\r\n\t\tobj['data.bonuses.rwak.damage'] = macroActor.data.flags.sneakMacro.oldRDmg;\t\r\n\t\tmacroActor.update(obj);\r\n\t\t\r\n\t// if sneak attack is disabled, enable it\r\n\t} else {\t\t\r\n\t\tchatMsg = `${macroActor.name} starts sneak attacking!`;\r\n\t\t\r\n\t\tlet obj = {};\r\n\t\tobj['flags.sneakMacro.enabled'] = true;\r\n\r\n\t\t// Preserve old mwak damage bonus if there was one\r\n\t\tlet oldMDmg = macroActor.data.data.bonuses.mwak.damage;\r\n\t\tif (oldMDmg==null || oldMDmg == undefined || oldMDmg == '') oldMDmg = 0;\r\n\t\tobj['flags.sneakMacro.oldMDmg'] = JSON.parse(JSON.stringify(oldMDmg));\r\n\r\n\t\t// Preserve old rwak damage bonus if there was one\r\n\t\tlet oldRDmg = macroActor.data.data.bonuses.rwak.damage;\r\n\t\tif (oldRDmg==null || oldRDmg == undefined || oldRDmg == '') oldRDmg = 0;\r\n\t\tobj['flags.sneakMacro.oldRDmg'] = JSON.parse(JSON.stringify(oldRDmg));\r\n\r\n\t\t\r\n\t\t// Determining the rogue level\r\n\t\trogueLvls = rogue.data.data.levels;\r\n\r\n\t\t// Formula to determine the sneak attack damage depending on rogue level\t\r\n\t\tsneakDice = Math.ceil(rogueLvls/2);\r\n\t\r\n\t\t//actually add the bonus sneak attack damage to the previous bonus damage\r\n\t\t//respect roll formulas if present.\r\n\t\tif (oldMDmg==null || oldMDmg == undefined || oldMDmg == '' || oldMDmg == 0) {\r\n\t\t\tobj['data.bonuses.mwak.damage'] = `${sneakDice}d6`;\r\n\t\t} else {\r\n\t\t\tobj['data.bonuses.mwak.damage'] = `${oldMDmg} + ${sneakDice}d6`;\r\n\t\t}\r\n\r\n\t\tif (oldRDmg==null || oldRDmg == undefined || oldRDmg == '' || oldRDmg == 0) {\r\n\t\t\tobj['data.bonuses.rwak.damage'] = `${sneakDice}d6`;\r\n\t\t} else {\r\n\t\t\tobj['data.bonuses.rwak.damage'] = `${oldRDmg} + ${sneakDice}d6`;\r\n\t\t}\t\r\n\r\n\t\tmacroActor.update(obj);\r\n\r\n\t}\t\r\n\t\r\n\t//mark or unmark character's token with Sneaky effect icon, if sneakIconPath is defined\r\n\t(async () => { \r\n\t\ttoggleResult = await macroToken.toggleEffect(sneakIconPath);\r\n\t\tif (toggleResult == enabled) macroToken.toggleEffect(sneakIconPath);  \r\n\t})();\r\n\r\n\t//toggle macro icon and name, if enabled\r\n\tif (toggleMacro) {\r\n//\t\tNorc's preferred icons, not sure if publicly available\r\n//\t\tsneakyMacroImgPath = 'systems/dnd5e/icons/skills/shadow_17.jpg';\r\n//\t\tstopSneakIconPath = 'systems/dnd5e/icons/skills/yellow_11.jpg';\r\n\t\tlet sneakMacro = game.macros.getName(sneakMacroName);\r\n\t\t\t//Also check for name of macro in its \"off\" form\r\n\t\t\tif (sneakMacro == null || sneakMacro == undefined) {\r\n\t\t\t\tsneakMacro = game.macros.getName('Stop ' + sneakMacroName);\r\n\t\t\t}\r\n\t\tlet obj = {};\r\n\t\tif ( (sneakMacro !== null && sneakMacro !== undefined) && \r\n\t\t\t\t+ (stopSneakIconPath !== null && stopSneakIconPath !== undefined && stopSneakIconPath !== '') ) {\r\n\t\t\tif (enabled) {\r\n\t\t\tobj['img'] = sneakIconPath;\r\n\t\t\tobj['name'] = sneakMacroName;\r\n\t\t\t} else {\r\n\t\t\tobj['img'] = stopSneakIconPath;\r\n\t\t\tobj['name'] = 'Stop ' + sneakMacroName;\r\n\t\t\t}\r\n\t\t\tsneakMacro.update(obj);\r\n\t\t} else {\r\n\t\tui.notifications.warn(`${sneakMacroName} ${warnMacroNotFound}`);\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n} else {\r\nui.notifications.error(`${errorReason}`);\t\r\n}\r\nif (chatMsg !== '') {\r\n\tlet chatData = {\r\n\t\tuser: game.user._id,\r\n\t\tspeaker: ChatMessage.getSpeaker(),\r\n\t\tcontent: chatMsg\r\n\t};\r\n\tChatMessage.create(chatData, {});\r\n}","author":"hZjcXAiJd9XIdRhW","img":"icons/svg/mystery-man-black.svg","actorIds":[],"_id":"lDCvZN224Rtn5LRx"}
{"name":"Rage","permission":{"default":0,"hZjcXAiJd9XIdRhW":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"//\t\tDISCLAIMER:\t\tThis macro is an evolved version of the original D&D 5e Rage Macro masterwork written by Felix#6196.\r\n//\t\t\t\t\t\tNorc#5108 is now maintaining this macro along with continued support from Felix.\r\n//\r\n//\r\n//\t\tUPDATES:\t\t1.\tFixed errors resulting from declarations of \"actor\" and \"token\" in a script macro. \r\n//\t\t\t\t\t\t\tAdded automatic Totem Spirit: Bear detection and resistance application \r\n//\t\t\t\t\t\t\tAdded error messages for trying to rage with no token or no barbarian selected\r\n//\t\t\t\t\t\t2.\t(Felix) Added resource/usage deduction and errors (re-added after accidentally overwriting the addition)\r\n//\t\t\t\t\t\t\tFixed rage damage at level 8\r\n//\t\t\t\t\t\t3.\t(2020/05/30) \"Version 2.0\" \t\r\n//\t\t\t\t\t\t\tImplemented Felix's idea to use global melee weapon attack bonus instead of modifying items\r\n//\t\t\t\t\t\t\tImproved Rage icon toggling to be more reliable\r\n//\t\t\t\t\t\t\tRemoved code from the resource management that created dependency on The Furnace Advanced Macros\r\n//\t\t\t\t\t\t\tImplemented Felix's fix for issue where new resistances and rage uses were not saving properly\r\n//\t\t\t\t\t\t\tFixed rage damage formula again...\r\n//\t\t\t\t\t\t\tAdded basic support for non-strength Based barbarians (Dex, Hexblade)\r\n//\t\t\t\t\t\t\tAdded optional ability to toggle the icon and name of the macro itself based on current raging state.\r\n//\t\t\t\t\t\t4.\t(2020/06/04) \r\n//\t\t\t\t\t\t\tFixed bug with experimental macro name/icon toggle only by renaming \"actor\" and \"token\"\r\n//\t\t\t\t\t\t\tAdded basic localization support to allow searching for translated class features\r\n//\t\t\t\t\t\t5.\t(2020/06/10)\r\n//\t\t\t\t\t\t\tRework to rage damage logic under the hood for edge case (other changes to bonus damage mid-combat) \r\n//\t\t\t\t\t\t\tRemoved logic that was causing multiple character sheets to open in some cases\r\n//\t\t\t\t\t\t\tEnhanced localization support\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!   Bonus Tip 1: \t\tOptional Rage Resource Consumption\r\n//!!!\tTo automatically use and track Rage, you must have a resource exactly named \"Rage\" on your character sheet. This text can be changed\r\n//!!!\tby altering the value for \"rageResourceName\" in the LOCALIZATION SUPPORT section below).\r\n//!!!\tNote: \tImporting via VTTA Beyond Integration uses this text already. The macro can then automatically detect the Rage resource.\r\n//!!!\r\n//!!!\tBonus Tip 2: \t\tBear Totem Spirit Barbs\r\n//!!!\tIf you chose the Spirit Seeker Primal path, and at level 3 you chose the Bear Totem Spirit (resistance to all non-psychic damage), \r\n//!!!\tin your 5E character sheet, double-check that the name of your Totem Spirit feature to EXACTLY \"Totem Spirit: Bear\". This text can be\r\n//!!!\tchanged by altering the value for \"bearTotemFeatureName\" in the LOCALIZATION SUPPORT section below).\r\n//!!!\tNote: \tImporting via VTTA Beyond Integration uses this text already. The macro then automatically adds the extra \r\n//!!!\t\t\tBear Totem Spirit resistances.\r\n//!!!\r\n//!!!\tBonus Tip 3: \t\tThrown Weapons\r\n//!!!\tWhen a barb throws a weapon using strength, typically a javelin but also possibly a dagger, dart, sword, bar table etc, the rage bonus\r\n//!!!\tshould not be added because it is a ranged attack. However, D&D5E calls javelins and daggers Melee Weapons, because technically they\r\n//!!!\tare both. To solve this issue, if you always throw the weapon, click the weapon's details and change the attack type to \"Ranged Weapon\r\n//!!!\tAttack\" in the Action Type dropdown. If you want, you can add a second copy of the item (with no weight/quantity) to use for meleeing.\r\n//!!!\r\n//!!!\tBonus Tip 4: \t\tThe Rage Condition\r\n//!!!\tIf you use the Combat Utility Belt module's Condition Lab, try adding a condition called \"Raging\" with the same icon\r\n//!!!\tas the optional rage icon overlay, 'icons/svg/explosion.svg' by default.  See EXPERIMENTAL MACRO ICON/NAME TOGGLE section below.\r\n//!!!\r\n//!!!\tBonus Tip 5: \t\tObsidian Sheet Compatibility\r\n//!!!\tIf using Obsidian module, try replacing \"Barbarian\" with \"brb\" as the barbClassName value in LOCALIZATION SUPPORT below.\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tOPTIONAL TOKEN ICON-\tOn by default. If a path to a rage icon is defined, it displays like a condition on the raging barbarian.\r\n//!!!\t\t\t\t\t\t\tTo use a different icon, manually change the filepath below or leave it empty ('') to disable the effect.\r\n//!!!\r\nconst rageIconPath = 'icons/svg/explosion.svg';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tOPTIONAL RESOURCE DEDUCTION \tOn by default. First option automatically subtracts from the Rage Resource if enabled.\r\n//!!!\t\t\t\t\t\t\t\t\tSecond option prevents raging if no Rage resource is left. Set to false if you do not want this.\r\n\r\n\t\t\tconst deductResource = true;\r\n\t\t\tconst preventNegativeResource = true;\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tOPTIONAL NON-STRENGTH BARBARIAN SUPPORT\t\tONLY override to FALSE if your barbarian does not use Strength to make melee attacks\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\tand therefore does not get the Rage bonus to melee weapon attack damage.\r\n//!!!\r\n\t\t\tconst strAttacks = true;\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tEXPERIMENTAL MACRO ICON/NAME TOGGLE\t\tIf enabled, the macro icon and name toggles based on the barbarian's rage state.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\tCAUTIONS: \t1. \tThis feature is off by default and is intended for ADVANCED USERS ONLY.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t2. \tRequires configuration using \"The Furnace\" module for a player to run!\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe GM needs to grant The Furnace's \"Run as GM\" permission for this macro.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t3. \tWorks best with only one barbarian using this feature at a time.\r\n\r\n\t\t\t//To auto-toggle the macro's icon/name, override toggleMacro to true below.\r\n\t\t\tconst toggleMacro = true;\r\n\r\n\t\t\t//To use a different icon, manually change the filepath here\r\n\t\t\tconst stopRageIconPath = 'icons/svg/unconscious.svg';\r\n\r\n\t\t\t//You must update the following constant to this macro's exact name for the macro icon toggling to work.\r\n\t\t\tconst rageMacroName = 'Rage';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//declarations\r\nlet barb = '';\r\nlet chatMsg = '';\r\nlet bear = '';\r\nlet noRage = false;\r\nlet rageDmgAdded = false;\r\nlet toggleResult = false;\r\nlet macroActor = actor;\r\nlet macroToken = token;\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tLOCALIZATION SUPPORT\t\t\t\tSets names of D&D5E features as constants instead of hardcoding to allow easier translation.\r\n//!!!\t\t\t\t\t\t\t\t\t\tSets error messages and flavor text as constants also for easier translation.\r\n//!!!\r\n\t\t\t//MUST MATCH VALUES IN CHARACTER SHEET (if present)\r\n\t\t\tconst barbClassName = 'Barbarian';\r\n\t\t\tconst rageResourceName = 'Rage';\r\n\t\t\tconst bearTotemFeatureName = 'Totem Spirit: Bear';\r\n\r\n\t\t\t//All remaining values may be changed freely\r\n\r\n\t\t\t//Rage chat message flavor text. Actor's name appears immediately before these two strings in the message.\r\n\t\t\tconst rageMsg = ' is RAAAAAGING!'\r\n\t\t\tconst endRageMsg =  ' is no longer raging.';\r\n\r\n\t\t\t//error and warning messages\r\n\t\t\tconst errorSelectBarbarian = 'Please select a single barbarian token.';\r\n\t\t\tconst errorNoRage = ' does not have any rage left, time for a long rest!';\r\n\t\t\tconst warnMacroNotFound = ' is not a valid macro name, please fix. Rage toggle successful but unable to alter macro.';\r\n\t\t\tconst errorSelectToken = 'Please select a token.';\r\n\t\t\tconst errorFailRevert = 'Failed to revert global melee weapon attack bonus, please check manually.';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n\r\n//main\r\n//check to see if Actor exists and is a barbarian\r\nif (macroActor !== undefined && macroActor !== null) {\r\n\r\n\t// get the barbarian class item\r\n\tbarb = macroActor.items.find(i => i.name === `${barbClassName}`);\r\n\tif (barb == undefined) {\r\n\t\tui.notifications.warn(`${errorSelectBarbarian}`);\r\n\t}\r\n\tif (barb !== undefined && barb !== null) {\r\n\t\tchatMsg = `${macroActor.name} + rageMsg`;\r\n\t\tlet enabled = false;\r\n\t\t// Store the state of the rage toggle flags that indicate if rage is active or not\r\n\t\tif (macroActor.data.flags.rageMacro !== null && macroActor.data.flags.rageMacro !== undefined) {\r\n\t\t\tenabled = true;\r\n\t\t\t\t// Store whether there is also a rage damage bonus currently active\r\n\t\t\t\tif (macroActor.data.flags.rageMacro[\"rageDmgAdded\"] == true) {\r\n\t\t\t\t\trageDmgAdded = true;\r\n\t\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Calculate rage value for use in damage reversion and application\r\n\t\t// Determining the barbarian level\r\n\t\tlet barblvl = barb.data.data.levels;\r\n\r\n\t\t// Formula to determine the rage bonus damage depending on barbarian level\r\n\t\tlet lvlCorrection =  barblvl === 16 || barblvl === 17 ? 1 : 0;\r\n\t\tlet rageDmg = 2 + Math.floor(barblvl / 9) + lvlCorrection;\r\n\t\tlet dmg = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.mwak.damage));\r\n\r\n\t\t// if rage is active, disable it\r\n\t\tif (enabled) {\r\n\t\t\tchatMsg = `${macroActor.name} ${endRageMsg}`;\r\n\t\t\t// reset resistances and melee weapon attack bonus\r\n\t\t\tlet obj = {};\r\n\t\t\tobj['flags.rageMacro'] = null;\r\n\t\t\t//revert damage resistances\r\n\t\t\tobj['data.traits.dr'] = macroActor.data.flags.rageMacro.oldResistances;\r\n\r\n\t\t\t//carefully revert rage global mwak damage bonus to original value, if that bonus is active\r\n\t\t\t//eventually want to add support so only last instance found is replaced.\r\n\t\t\tif(rageDmgAdded) {\r\n\t\t\t\tif (dmg == rageDmg || dmg == null || dmg == undefined || dmg == '' || dmg == 0){\r\n\t\t\t\t\tconsole.log('Removing simple rage damage');\r\n\t\t\t\t\tobj['data.bonuses.mwak.damage']='';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log('Removing complex rage damage');\r\n\t\t\t\t\tlet patt = `\\\\s\\\\+\\\\s${rageDmg}($|[^0123456789dkrxcm(@{])`;\r\n\t\t\t\t\tlet result = dmg.search(patt);\r\n\t\t\t\t\tif (result !== -1) {\r\n\t\t\t\t\t\tlet len = ('' + rageDmg).length;\r\n\t\t\t\t\t\tlet origDmg = duplicate(dmg);\r\n\t\t\t\t\t\tlet firstHalfDmg = duplicate(dmg).substring(0,result);\r\n\t\t\t\t\t\t//Test String: 2d6 + 2 + 2d6\r\n\t\t\t\t\t\tlet lastHalfDmg = duplicate(dmg).substring(result+3+len, origDmg.length);\r\n\t\t\t\t\t\tdmg = `${firstHalfDmg}${lastHalfDmg}`;\r\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage']=dmg;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tui.notifications.error(`${errorFailRevert}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmacroActor.update(obj);\r\n\r\n\t\t// if rage is disabled, enable it\r\n\t\t} else {\r\n\t\t\tif (deductResource) {\r\n\t\t\t\tlet hasAvailableResource = false;\r\n\t\t\t\tlet newResources = duplicate(macroActor.data.data.resources)\r\n\t\t\t\tlet obj = {}\r\n\t\t\t\t// Look for Resources under the Core macroActor data\r\n\t\t\t\tlet resourceKey = Object.keys(macroActor.data.data.resources).filter(k => macroActor.data.data.resources[k].label === `${rageResourceName}`).shift();\r\n\t\t\t\tif (resourceKey && (macroActor.data.data.resources[resourceKey].value > 0 || !preventNegativeResource)) {\r\n\t\t\t\t\thasAvailableResource = true;\r\n\t\t\t\t\tnewResources[resourceKey].value--;\r\n\t\t\t\t\tobj['data.resources'] = newResources \r\n\t\t\t\t\tmacroActor.update(obj);\r\n\t\t\t\t}\r\n\t\t\t\tif (!hasAvailableResource) {\r\n\t\t\t\t\tui.notifications.error(`${macroActor.name} ${errorNoRage}`);\r\n\t\t\t\t\tnoRage=true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//activate rage if there is rage available, or if it is okay to rage with 0 resources\r\n\t\t\tif (!noRage) {\r\n\t\t\t\tchatMsg = `${macroActor.name} ${rageMsg}`;\r\n\t\t\t\t// update resistance\r\n\t\t\t\tlet obj = {};\r\n\t\t\t\t// storing old resistances in flags to restore later\r\n\t\t\t\tobj['flags.rageMacro.enabled'] = true;\r\n\t\t\t\tobj['flags.rageMacro.oldResistances'] = JSON.parse(JSON.stringify(macroActor.data.data.traits.dr));\r\n\t\t\t\t// add bludgeoning, piercing and slashing resistance\r\n\t\t\t\tlet newResistance = duplicate(macroActor.data.data.traits.dr);\r\n\t\t\t\tif (newResistance.value.indexOf('bludgeoning') === -1) newResistance.value.push('bludgeoning');\r\n\t\t\t\tif (newResistance.value.indexOf('piercing') === -1) newResistance.value.push('piercing');\r\n\t\t\t\tif (newResistance.value.indexOf('slashing') === -1) newResistance.value.push('slashing');\r\n\t\t\t\t//If bear totem, add bear totem resistances.\r\n\t\t\t\tbear = macroActor.items.find(i => i.name === `${bearTotemFeatureName}`)\r\n\t\t\t\tif (bear !== undefined && bear!== null) {\r\n\t\t\t\t\tif (newResistance.value.indexOf('acid') === -1) newResistance.value.push('acid');\r\n\t\t\t\t\tif (newResistance.value.indexOf('cold') === -1) newResistance.value.push('cold');\r\n\t\t\t\t\tif (newResistance.value.indexOf('fire') === -1) newResistance.value.push('fire');\r\n\t\t\t\t\tif (newResistance.value.indexOf('force') === -1) newResistance.value.push('force');\r\n\t\t\t\t\tif (newResistance.value.indexOf('lightning') === -1) newResistance.value.push('lightning');\r\n\t\t\t\t\tif (newResistance.value.indexOf('necrotic') === -1) newResistance.value.push('necrotic');\r\n\t\t\t\t\tif (newResistance.value.indexOf('poison') === -1) newResistance.value.push('poison');\r\n\t\t\t\t\tif (newResistance.value.indexOf('radiant') === -1) newResistance.value.push('radiant');\r\n\t\t\t\t\tif (newResistance.value.indexOf('thunder') === -1) newResistance.value.push('thunder');\r\n\t\t\t\t}\r\n\t\t\t\tobj['data.traits.dr'] = newResistance;\r\n\t\t\t\tmacroActor.update(obj);\r\n\r\n\t\t\t\t// For Strength barbarians, update global melee weapon attack bonus to include rage bonus\r\n\t\t\t\tif (strAttacks) {\r\n\t\t\t\t\tobj['flags.rageMacro.rageDmgAdded'] = true;\r\n\t\t\t\t\t// Preserve old mwak damage bonus if there was one, just in case\r\n\t\t\t\t\tobj['flags.rageMacro.oldDmg'] = JSON.parse(JSON.stringify(dmg));\r\n\t\t\t\t\t//actually add the bonus rage damage to the previous bonus damage\r\n\t\t\t\t\t//respect roll formulas by doing string addition if value is already present.\r\n\t\t\t\t\tif (dmg == null || dmg == undefined || dmg == 0 || dmg == '') {\r\n\t\t\t\t\t\tconsole.log('Adding simple rage damage');\r\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage'] = rageDmg;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log('Adding complex rage damage');\r\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage'] = `${dmg} + ${rageDmg}`;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmacroActor.update(obj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!noRage) {\r\n\t\t\t// toggle rage icon, if rage path is defined above\r\n\t\t\t(async () => { \r\n\t\t\t\ttoggleResult = await macroToken.toggleEffect(rageIconPath);\r\n\t\t\t\tif (toggleResult == enabled) macroToken.toggleEffect(rageIconPath);  \r\n\t\t\t})();\r\n\t\t\t\r\n\t\t\t//toggle macro icon and name, if macro name is correct and stop rage icon path is defined\r\n\t\t\tlet rageMacro = game.macros.getName(rageMacroName);\r\n\t\t\t\t//check for name of macro in its \"off\" form\r\n\t\t\t\tif (rageMacro == null || rageMacro == undefined) {\r\n\t\t\t\t\trageMacro = game.macros.getName('Stop ' + rageMacroName);\r\n\t\t\t\t}\r\n\t\t\tlet obj = {};\r\n\t\t\tif ( (rageMacro !== null && rageMacro !== undefined) && toggleMacro == true && \r\n\t\t\t\t\t+ (stopRageIconPath !== null && stopRageIconPath !== undefined && stopRageIconPath !== '') ) {\r\n\t\t\t\tif (enabled) {\r\n\t\t\t\t  obj['img'] = rageIconPath;\r\n\t\t\t\t  obj['name'] = rageMacroName;\r\n\t\t\t\t} else {\r\n\t\t\t\t  obj['img'] = stopRageIconPath;\r\n\t\t\t\t  obj['name'] = 'Stop ' + rageMacroName;\r\n\t\t\t\t}\r\n\t\t\t\trageMacro.update(obj);\r\n\t\t\t} else {\r\n\t\t\tif (toggleMacro == true) ui.notifications.warn(`${rageMacroName} ${warnMacroNotFound}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else ui.notifications.warn(errorSelectToken);\r\n// write to chat if needed:\r\nif (chatMsg !== '') {\r\n\tlet chatData = {\r\n\t\tuser: game.user._id,\r\n\t\tspeaker: ChatMessage.getSpeaker(),\r\n\t\tcontent: chatMsg\r\n\t};\r\n\tChatMessage.create(chatData, {});\r\n}","author":"hZjcXAiJd9XIdRhW","img":"icons/svg/explosion.svg","actorIds":[],"_id":"se1JkTQ0Tnut1Yoj"}
{"name":"Move","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//////////////////////////////move macro//////////////////////////\r\n//required arguments => args[0] === tokenID///////////////////////\r\n////////////////////////args[1] === right (# of squares)//////////\r\n////////////////////////args[2] === down (# of squares)///////////\r\n\r\nlet t = canvas.tokens.get(args[0]) ? canvas.tokens.get(args[0]) : canvas.notes.get(args[0]); \r\n\r\nlet g = canvas.scene.data.grid;\r\n\r\nlet newX = (t.data.x + (g *parseInt(args[1])));\r\nlet newY = (t.data.y + (g *parseInt(args[2])));\r\n\r\nconsole.log(...args,t,newX,newY);\r\n\r\nt.update({\r\n    x : newX,\r\n    y : newY\r\n});","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"sxJRqRDEGLYmMNwz"}
{"name":"Create Tables By Rarity","permission":{"default":0,"XH24HWwqaZhSywRV":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"game.betterTables.createTableFromCompendium(\"Full Table Fishs\",\r\n    //\"dnd5e.items\",\r\n    \"mod-my-world.item-foods\",\r\n    { weightPredicate: predicate }\r\n);\r\n\r\nfunction predicate(entity) {\r\n    if(entity.type != \"loot\") return 0;\r\n    //if(entity.data.data.consumableType != \"food\") return 0;\r\n    if(entity.data.data.source != \"Fish\") return 0;\r\n    switch (entity.data.data.rarity) {\r\n        case \"Common\":\r\n            return 16;\r\n        case \"Uncommon\":\r\n            return 8;\r\n        case \"Rare\":\r\n            return 4;\r\n        case \"Very rare\":\r\n            return 2;\r\n        case \"Legendary\":\r\n            return 1;\r\n        default:\r\n            return 0;\r\n    }\r\n}","author":"XH24HWwqaZhSywRV","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"uqhL0gLIVUzjDden"}
{"name":"ResetTrigger","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let opts = args[0].split('.');\r\nlet uniquekey = opts[0] + opts[1];\r\nif (game.scenes.active.getFlag(`world`, `${uniquekey}`))\r\n    game.scenes.active.unsetFlag(`world`, `${uniquekey}`);\r\nif (game.user.getFlag(`world`, `${uniquekey}`))\r\n    game.user.unsetFlag(`world`, `${uniquekey}`);","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"uwPeiFdRbJVwroun"}
{"name":"Visit","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/*\r\nargs[0] = \"Harbin Wester\"; // name of token\r\nargs[1] = 2;// time in sec\r\nargs[2] = 3;//Reset Click in sec\r\nargs[3] = \"key-unique\";// unico clique\r\n*/\r\nif (game.user.isGM === true) return;\r\nif (args[3] !== undefined || args[3] === \"\") {\r\n    //let invalid = game.user.getFlag(`world`, `${args[3]}`) ?\r\n        //game.user.getFlag(`world`, `${args[3]}`) : false;\r\n    //if (invalid) return;\r\n    //game.user.setFlag(`world`, `${args[3]}`, true);\r\n    if (game.user.isGM === true) return;\r\n    if (Innocenti.TriggerShot(args[3])) return;\r\n}\r\n\r\nif (canvas.tokens.controlled.length === 0)\r\n    return ui.notifications.error(\"select a token\");\r\n\r\nsetTimeout(function () {\r\n    let t = canvas.tokens.placeables.find(i => i.name === args[0]);\r\n    //console.log(t);\r\n    let actorid = game.actors.get(ChatMessage.getSpeaker().actor);\r\n    canvas.tokens.get(t.name).actor.update({ [`permission.${actorid}`]: 2 });\r\n    ChatMessage.create({\r\n        flavor: `<img src=\\\"${t.data.img}\\\" width=\\\"30px\\\" />`,\r\n        speaker: ChatMessage.getSpeaker(),\r\n        content: `<h3>Se dirige para @Actor[${t.data.actorId}]{${t.name}} </h3>`,\r\n        type: CONST.CHAT_MESSAGE_TYPES.EMOTE,\r\n    });\r\n}, (args[1] * 1000));\r\n\r\n// Reset for click\r\nif (args[2] !== undefined && args[2] >= args[1]) {\r\n    let visit_r = (args[2] >= args[1]) ? args[2] : args[1] + 1;\r\n    setTimeout(function () {\r\n        game.user.unsetFlag(`world`, `${args[3]}`);\r\n        ui.notifications.info(\"Removeu!\");\r\n    }, (visit_r * 1000))\r\n}","author":"bE4FsemgBF2CPXB2","img":"icons/svg/d20-highlight.svg","actorIds":[],"_id":"v3Gd9Qk6OqiXJh1V"}
{"name":"Reveal","permission":{"default":0,"bE4FsemgBF2CPXB2":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"//args[0] = \"y3y3UDXehed4iw6D\";\r\n//ui.notifications.info(\"Chamou o reavel\");\r\nfor(let arg of args)\r\n{\r\n    try{\r\n        canvas.tokens.get(arg).update({\"hidden\" : false});\r\n    }catch(error){}\r\n    try{\r\n        canvas.drawings.get(arg).update({\"hidden\" : false});\r\n    }catch(error){}\r\ntry{\r\n        canvas.tiles.get(arg).update({\"hidden\" : false});\r\n    }catch(error){}\r\n}","author":"bE4FsemgBF2CPXB2","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"vvsLeipHPiWQwrGq"}
